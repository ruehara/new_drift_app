import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema5 extends i0.VersionedSchema {
  Schema5({required super.database}) : super(version: 5);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    teste,
    users,
    posts,
    postsInsert,
    postsUpdate,
    postsDelete,
    likes,
    follows,
    popularUsers,
    usersName,
  ];
  late final Shape0 teste = Shape0(
      source: i0.VersionedTable(
        entityName: 'teste',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 users = Shape1(
      source: i0.VersionedTable(
        entityName: 'users',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 posts = Shape2(
      source: i0.VersionedTable(
        entityName: 'posts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_12,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Trigger postsInsert = i1.Trigger(
      'CREATE TRIGGER posts_insert AFTER INSERT ON posts BEGIN INSERT INTO search_in_posts ("rowid", author, content) VALUES (new.id, new.author, new.content);END',
      'posts_insert');
  final i1.Trigger postsUpdate = i1.Trigger(
      'CREATE TRIGGER posts_update AFTER UPDATE ON posts BEGIN INSERT INTO search_in_posts (search_in_posts, "rowid", author, content) VALUES (\'delete\', old.id, old.author, old.content);INSERT INTO search_in_posts ("rowid", author, content) VALUES (new.id, new.author, new.content);END',
      'posts_update');
  final i1.Trigger postsDelete = i1.Trigger(
      'CREATE TRIGGER posts_delete AFTER DELETE ON posts BEGIN INSERT INTO search_in_posts (search_in_posts, "rowid", author, content) VALUES (\'delete\', old.id, old.author, old.content);END',
      'posts_delete');
  late final Shape3 likes = Shape3(
      source: i0.VersionedTable(
        entityName: 'likes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 follows = Shape4(
      source: i0.VersionedTable(
        entityName: 'follows',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(followed, follower)',
        ],
        columns: [
          _column_15,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 popularUsers = Shape5(
      source: i0.VersionedView(
        entityName: 'popular_users',
        createViewStmt:
            'CREATE VIEW popular_users AS SELECT * FROM users ORDER BY (SELECT count(*) FROM follows WHERE followed = users.id);',
        columns: [
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index usersName =
      i1.Index('users_name', 'CREATE INDEX users_name ON users (name)');
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get teste =>
      columnsByName['teste']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get teste2 =>
      columnsByName['teste2']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get teste3 =>
      columnsByName['teste3']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get teste4 =>
      columnsByName['teste4']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get teste5 =>
      columnsByName['teste5']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        type: i1.DriftSqlType.int, $customConstraints: 'PRIMARY KEY');
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('teste', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('teste2', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('teste3', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('teste4', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('teste5', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('content', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get biography =>
      columnsByName['biography']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get preferences =>
      columnsByName['preferences']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get profilePicture =>
      columnsByName['profile_picture']! as i1.GeneratedColumn<i2.Uint8List>;
}

i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL PRIMARY KEY');
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('biography', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('preferences', aliasedName, true,
        type: i1.DriftSqlType.string, $customConstraints: '');
i1.GeneratedColumn<i2.Uint8List> _column_11(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>('profile_picture', aliasedName, true,
        type: i1.DriftSqlType.blob, $customConstraints: '');

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get author =>
      columnsByName['author']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_12(String aliasedName) =>
    i1.GeneratedColumn<int>('author', aliasedName, false,
        type: i1.DriftSqlType.int,
        $customConstraints: 'NOT NULL REFERENCES users(id)');

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get post =>
      columnsByName['post']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get likedBy =>
      columnsByName['liked_by']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('post', aliasedName, false,
        type: i1.DriftSqlType.int,
        $customConstraints: 'NOT NULL REFERENCES posts(id)');
i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('liked_by', aliasedName, false,
        type: i1.DriftSqlType.int,
        $customConstraints: 'NOT NULL REFERENCES users(id)');

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get followed =>
      columnsByName['followed']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get follower =>
      columnsByName['follower']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_15(String aliasedName) =>
    i1.GeneratedColumn<int>('followed', aliasedName, false,
        type: i1.DriftSqlType.int,
        $customConstraints: 'NOT NULL REFERENCES users(id)');
i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>('follower', aliasedName, false,
        type: i1.DriftSqlType.int,
        $customConstraints: 'NOT NULL REFERENCES users(id)');

class Shape5 extends i0.VersionedView {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get biography =>
      columnsByName['biography']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get preferences =>
      columnsByName['preferences']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get profilePicture =>
      columnsByName['profile_picture']! as i1.GeneratedColumn<i2.Uint8List>;
}

i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('biography', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('preferences', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<i2.Uint8List> _column_21(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>('profile_picture', aliasedName, true,
        type: i1.DriftSqlType.blob);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 4:
        final schema = Schema5(database: database);
        final migrator = i1.Migrator(database, schema);
        await from4To5(migrator, schema);
        return 5;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from4To5: from4To5,
    ));
